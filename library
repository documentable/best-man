local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local UILibrary = {}
UILibrary.__index = UILibrary

function UILibrary.new(title)
    local self = setmetatable({}, UILibrary)

    self.Visible = true
    self.MenuKey = Enum.KeyCode.RightShift -- Default menu key
    self.SelectedIndex = 1 -- Default to first option
    self.SettingKeybind = false
    self.Elements = {}

    -- Get Screen Size
    local ScreenSize = workspace.CurrentCamera.ViewportSize
    local UI_X = 20
    local UI_Y = ScreenSize.Y - 160

    -- Title
    self.Title = Drawing.new("Text")
    self.Title.Text = title
    self.Title.Size = 24
    self.Title.Position = Vector2.new(UI_X, UI_Y)
    self.Title.Color = Color3.fromRGB(255, 255, 255)
    self.Title.Outline = true
    self.Title.Font = 2 -- JosefinSans
    self.Title.Visible = self.Visible

    -- Divider
    self.Divider = Drawing.new("Line")
    self.Divider.From = Vector2.new(UI_X, UI_Y + 25)
    self.Divider.To = Vector2.new(UI_X + 200, UI_Y + 25)
    self.Divider.Color = Color3.fromRGB(255, 255, 255)
    self.Divider.Visible = self.Visible

    self.ElementYOffset = UI_Y + 40

    -- Arrow Key Navigation
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end

        if input.KeyCode == Enum.KeyCode.Up then
            self.SelectedIndex = math.max(1, self.SelectedIndex - 1)
            self:UpdateSelection()
        elseif input.KeyCode == Enum.KeyCode.Down then
            self.SelectedIndex = math.min(#self.Elements, self.SelectedIndex + 1)
            self:UpdateSelection()
        elseif input.KeyCode == Enum.KeyCode.Right then
            local element = self.Elements[self.SelectedIndex]
            if element then
                if element.Type == "Toggle" then
                    element.State = not element.State
                    element.Object.Text = "> " .. element.Text .. " [" .. (element.State and "ON" or "OFF") .. "]"
                    if element.Callback then element.Callback(element.State) end
                elseif element.Type == "Keybind" and not self.SettingKeybind then
                    element.Object.Text = "> " .. element.Text .. " [Press Any Key]"
                    self.SettingKeybind = true
                end
            end
        end
    end)

    -- Keybind Setting
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if self.SettingKeybind and not gameProcessed then
            local element = self.Elements[self.SelectedIndex]
            if element and element.Type == "Keybind" then
                element.AssignedKey = input.KeyCode
                element.Object.Text = "> " .. element.Text .. " [" .. self:FormatKeyName(element.AssignedKey) .. "]"
                self.SettingKeybind = false
                if element.Callback then element.Callback(element.AssignedKey) end
            end
        else
            -- Check if a keybind is pressed
            for _, element in pairs(self.Elements) do
                if element.Type == "Keybind" and input.KeyCode == element.AssignedKey then
                    if element.Callback then element.Callback(element.AssignedKey) end
                end
            end
        end
    end)

    return self
end

function UILibrary:ToggleVisibility()
    self.Visible = not self.Visible
    self.Title.Visible = self.Visible
    self.Divider.Visible = self.Visible
    for _, element in pairs(self.Elements) do
        element.Object.Visible = self.Visible
    end
end

function UILibrary:UpdateSelection()
    for i, element in ipairs(self.Elements) do
        if i == self.SelectedIndex then
            -- Keep enums (ON/OFF) visible even when selected
            if element.Type == "Toggle" then
                element.Object.Text = "> " .. element.Text .. " [" .. (element.State and "ON" or "OFF") .. "]"
            elseif element.Type == "Keybind" then
                element.Object.Text = "> " .. element.Text .. " [" .. self:FormatKeyName(element.AssignedKey) .. "]"
            else
                element.Object.Text = "> " .. element.Text
            end
        else
            -- Show normal state when not selected
            if element.Type == "Toggle" then
                element.Object.Text = element.Text .. " [" .. (element.State and "ON" or "OFF") .. "]"
            elseif element.Type == "Keybind" then
                element.Object.Text = element.Text .. " [" .. self:FormatKeyName(element.AssignedKey) .. "]"
            else
                element.Object.Text = element.Text
            end
        end
    end
end

function UILibrary:FormatKeyName(keyCode)
    return tostring(keyCode):gsub("Enum.KeyCode.", "")
end

function UILibrary:AddToggle(name, default, callback)
    local Toggle = Drawing.new("Text")
    Toggle.Text = name .. " [" .. (default and "ON" or "OFF") .. "]"
    Toggle.Size = 18
    Toggle.Position = Vector2.new(20, self.ElementYOffset)
    Toggle.Color = Color3.fromRGB(255, 255, 255)
    Toggle.Outline = true
    Toggle.Font = 2 -- JosefinSans
    Toggle.Visible = self.Visible

    self.ElementYOffset = self.ElementYOffset + 25

    table.insert(self.Elements, {
        Type = "Toggle",
        Object = Toggle,
        Text = name,
        State = default,
        Callback = callback
    })

    self:UpdateSelection()
end

function UILibrary:AddSlider(name, min, max, default, callback)
    local SliderLabel = Drawing.new("Text")
    SliderLabel.Text = name .. ": " .. default
    SliderLabel.Size = 18
    SliderLabel.Position = Vector2.new(20, self.ElementYOffset)
    SliderLabel.Color = Color3.fromRGB(255, 255, 255)
    SliderLabel.Outline = true
    SliderLabel.Font = 2 -- JosefinSans
    SliderLabel.Visible = self.Visible

    self.ElementYOffset = self.ElementYOffset + 25

    table.insert(self.Elements, {
        Type = "Slider",
        Object = SliderLabel,
        Text = name,
        Value = default,
        Min = min,
        Max = max,
        Callback = callback
    })

    self:UpdateSelection()
end

function UILibrary:AddKeybind(name, defaultKey, callback)
    local Keybind = Drawing.new("Text")
    Keybind.Text = name .. " [" .. self:FormatKeyName(defaultKey) .. "]"
    Keybind.Size = 18
    Keybind.Position = Vector2.new(20, self.ElementYOffset)
    Keybind.Color = Color3.fromRGB(255, 255, 255)
    Keybind.Outline = true
    Keybind.Font = 2 -- JosefinSans
    Keybind.Visible = self.Visible

    self.ElementYOffset = self.ElementYOffset + 25

    table.insert(self.Elements, {
        Type = "Keybind",
        Object = Keybind,
        Text = name,
        AssignedKey = defaultKey,
        Callback = callback
    })

    self:UpdateSelection()
end

return UILibrary
