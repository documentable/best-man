local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local UILibrary = {}
UILibrary.__index = UILibrary

function UILibrary.new(title)
    local self = setmetatable({}, UILibrary)

    self.Visible = true
    self.MenuKey = Enum.KeyCode.RightShift -- Default menu key

    -- UI Elements
    self.Elements = {}
    self.ElementYOffset = 50

    -- Title
    self.Title = Drawing.new("Text")
    self.Title.Text = title
    self.Title.Size = 24
    self.Title.Position = Vector2.new(20, 20)
    self.Title.Color = Color3.fromRGB(255, 255, 255)
    self.Title.Visible = self.Visible

    -- Divider
    self.Divider = Drawing.new("Line")
    self.Divider.From = Vector2.new(20, 45)
    self.Divider.To = Vector2.new(220, 45)
    self.Divider.Color = Color3.fromRGB(255, 255, 255)
    self.Divider.Visible = self.Visible

    -- Menu Toggle
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.MenuKey then
            self.Visible = not self.Visible
            self:ToggleVisibility()
        end
    end)

    return self
end

function UILibrary:ToggleVisibility()
    self.Title.Visible = self.Visible
    self.Divider.Visible = self.Visible
    for _, element in pairs(self.Elements) do
        element.Visible = self.Visible
    end
end

function UILibrary:AddToggle(name, default, callback)
    local Toggle = Drawing.new("Text")
    Toggle.Text = name .. " [OFF]"
    Toggle.Size = 18
    Toggle.Position = Vector2.new(20, self.ElementYOffset)
    Toggle.Color = Color3.fromRGB(255, 255, 255)
    Toggle.Visible = self.Visible

    self.ElementYOffset = self.ElementYOffset + 25
    table.insert(self.Elements, Toggle)

    local state = default

    Toggle.InputBegan = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mouse = UserInputService:GetMouseLocation()
            if (mouse - Toggle.Position).Magnitude < 100 then
                state = not state
                Toggle.Text = name .. " [" .. (state and "ON" or "OFF") .. "]"
                if callback then
                    callback(state)
                end
            end
        end
    end)
end

function UILibrary:AddSlider(name, min, max, default, callback)
    local SliderLabel = Drawing.new("Text")
    SliderLabel.Text = name .. ": " .. default
    SliderLabel.Size = 18
    SliderLabel.Position = Vector2.new(20, self.ElementYOffset)
    SliderLabel.Color = Color3.fromRGB(255, 255, 255)
    SliderLabel.Visible = self.Visible

    self.ElementYOffset = self.ElementYOffset + 25

    local Slider = Drawing.new("Line")
    Slider.From = Vector2.new(20, self.ElementYOffset)
    Slider.To = Vector2.new(220, self.ElementYOffset)
    Slider.Color = Color3.fromRGB(255, 255, 255)
    Slider.Visible = self.Visible

    self.ElementYOffset = self.ElementYOffset + 10

    local dragging = false
    local sliderPos = Vector2.new(20 + ((default - min) / (max - min)) * 200, self.ElementYOffset)

    local SliderButton = Drawing.new("Circle")
    SliderButton.Position = sliderPos
    SliderButton.Radius = 5
    SliderButton.Color = Color3.fromRGB(69, 69, 207)
    SliderButton.Visible = self.Visible

    table.insert(self.Elements, SliderLabel)
    table.insert(self.Elements, Slider)
    table.insert(self.Elements, SliderButton)

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mouse = UserInputService:GetMouseLocation()
            if (mouse - SliderButton.Position).Magnitude < 10 then
                dragging = true
            end
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        if dragging then
            local mouseX = math.clamp(UserInputService:GetMouseLocation().X, 20, 220)
            local newValue = math.floor(((mouseX - 20) / 200) * (max - min) + min)
            SliderButton.Position = Vector2.new(mouseX, SliderButton.Position.Y)
            SliderLabel.Text = name .. ": " .. newValue
            if callback then
                callback(newValue)
            end
        end
    end)
end

function UILibrary:AddKeybind(name, defaultKey, callback)
    local Keybind = Drawing.new("Text")
    Keybind.Text = name .. " [" .. tostring(defaultKey) .. "]"
    Keybind.Size = 18
    Keybind.Position = Vector2.new(20, self.ElementYOffset)
    Keybind.Color = Color3.fromRGB(255, 255, 255)
    Keybind.Visible = self.Visible

    self.ElementYOffset = self.ElementYOffset + 25
    table.insert(self.Elements, Keybind)

    local binding = false
    local assignedKey = defaultKey

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            if binding then
                assignedKey = input.KeyCode
                Keybind.Text = name .. " [" .. tostring(assignedKey) .. "]"
                binding = false
                if callback then
                    callback(assignedKey)
                end
            elseif input.KeyCode == assignedKey then
                callback(assignedKey)
            end
        end
    end)

    Keybind.InputBegan = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mouse = UserInputService:GetMouseLocation()
            if (mouse - Keybind.Position).Magnitude < 100 then
                Keybind.Text = name .. " [Press Any Key]"
                binding = true
            end
        end
    end)
end

return UILibrary
